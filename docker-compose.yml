version: '3'

services:
  # Zookeeper: Quản lý cụm Kafka
  zookeeper:
    image: bitnami/zookeeper:3.8
    ports:
      - "2181:2181"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    volumes:
      - zookeeper_data:/bitnami/zookeeper
    networks:
      - app-network
    restart: unless-stopped

  # Kafka: Message broker
  kafka:
    image: bitnami/kafka:3.4
    ports:
      - "9092:9092"
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
      - KAFKA_CREATE_TOPICS=fraud_tp:1:1
    volumes:
      - kafka_data:/bitnami/kafka
    depends_on:
      - zookeeper
    networks:
      - app-network
    restart: unless-stopped

  # Kafka UI: Giao diện quản trị Kafka
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    ports:
      - "8080:8080"
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181
    depends_on:
      - kafka
    networks:
      - app-network
    restart: unless-stopped

  # PostgreSQL: Cơ sở dữ liệu để lưu kết quả dự đoán
  postgres:
    image: postgres:14
    ports:
      - "5433:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=frauddb
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # PgAdmin: Giao diện quản trị PostgreSQL
  pgadmin:
    image: dpage/pgadmin4
    ports:
      - "5050:80"
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@example.com
      - PGADMIN_DEFAULT_PASSWORD=admin
    depends_on:
      - postgres
    networks:
      - app-network
    restart: unless-stopped

  # FastAPI App: API phát hiện gian lận
  fastapi_app:
    build:
      context: ../source1
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    volumes:
      - ../source1/pipeline_model:/app/pipeline_model
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/docs"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Spark Master: Nút chính của Spark cluster
  spark-master:
    image: bitnami/spark:3.4.0
    ports:
      - "8081:8080"  # Spark Web UI
      - "7077:7077"  # Spark Master port
    environment:
      - SPARK_MODE=master
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
    volumes:
      - ./app:/app
      - spark_data:/opt/bitnami/spark/data
    networks:
      - app-network
    restart: unless-stopped

  # Spark Worker: Nút làm việc của Spark cluster
  spark-worker:
    image: bitnami/spark:3.4.0
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_MEMORY=1G
      - SPARK_WORKER_CORES=1
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
    volumes:
      - ./app:/app
      - spark_worker_data:/opt/bitnami/spark/data
    depends_on:
      - spark-master
    networks:
      - app-network
    restart: unless-stopped

  # Ứng dụng Python cho Kafka và Spark
  fraud-app:
    build:
      context: .
      dockerfile: Dockerfile
    volumes:
      - ./app:/app
    depends_on:
      - kafka
      - spark-master
    networks:
      - app-network
    restart: unless-stopped
  # Kafka Producer: Sản xuất dữ liệu giao dịch từ file CSV
  kafka-producer:
    build:
      context: .
      dockerfile: Dockerfile
    command: /app/wait-for-kafka.sh /app/wait-for-spark.sh python kafkaProducer.py
    volumes:
      - ./app:/app
    depends_on:
      - kafka
      - spark-master
      - fraud-app
    environment:
      - PYTHONUNBUFFERED=1
    networks:
      - app-network
    restart: unless-stopped

  # Spark Consumer: Xử lý dữ liệu từ Kafka bằng Spark Streaming và gửi lên API
  spark-consumer:
    build:
      context: .
      dockerfile: Dockerfile
    command: /app/wait-for-kafka.sh /app/wait-for-spark.sh /app/wait-for-fastapi.sh /app/wait-for-postgres.sh python sparkConsumer.py
    volumes:
      - ./app:/app
    depends_on:
      - kafka
      - spark-master
      - kafka-producer
      - fastapi_app
      - postgres
    environment:
      - PYTHONUNBUFFERED=1
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=frauddb
      - POSTGRES_HOST=postgres
    networks:
      - app-network
    restart: unless-stopped

volumes:
  zookeeper_data:
  kafka_data:
  spark_data:
  spark_worker_data:
  postgres_data:

networks:
  app-network:
    driver: bridge 